std::vector it's not only for integers, but it's a type that accepts other types as well:

std::vector<char> a; means that for each char pushed back in the vector there will be automatically a position for it, behaving like 
std::string or char[] or char *.

std::vector<char*> will act like char *strings[]; where for each position you can receive a undefined number of chars.

this behavior is similar to std::array.

Also can be replicated with integers/doubles ecc:

std::vector<int*> integers;


When doing a comparison with indexes and sizes, the size of the vector is returned as a normal integer, 
let' say "6", but in fact, those elements are indexed from 0 to 5.

so if vector.size() = 6:

for (size_t x = 0; x < vector.size(); ++x) {

    if (x == vector.size()-1) {
        std::cout << "x reached end of vector" << std::endl;
      }
      
  we do size-1 because the actual end of the vector is 5 and not 6, because the elements start from
  0 and 5 is the actual sixth element.
