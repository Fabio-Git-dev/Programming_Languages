char *string is the equivalent of char string[].

if we do char string[8] = "xxxxxxxxxx", implicitly is char *string = "xxxxxxx" or

char *string = (char*)malloc(sizeof(char)*8);

a double pointer can also be declared and then defined like this:

extern char **strings;
or
extern char *strings[];

in this case, the pointer points to the position 1, allowing multiple character store without a specific size.

char *string[1] = {"any data initialized"};

Both act as pointers, where one has to be initialized and allocated, the other has a static
or a dynamic allocation based on which variable we use as a size inside the square parenthesis.

For a more simpler example about pointers, please check the "Pass by ref vs by value chapter"

NOTE: If you have to change the value of a pointer variable, don't rewrite it with the * symbol, just 
type the var name and =. Using the * symbol again means that you are reinitializing the pointer to something else.


NOTE: DO NOT do this:

int *a = 10

while (a < b) {
  *a++;
  }
  
 in this case *a++ means that we are increasing the POINTER POSITION, not the value stored inside the pointer.
 
 *++;

is equivalent to

*a;
a++; 

where the ++ increment operator has more precedence than the dereference itself, so before dereferencing it increases the entire pointer position.

